@page "/product"
@page "/product/{id:int}"

@inject ICategoryService categoryService;
@inject IProductService productService;
@inject IToastService toastService;
@inject NavigationManager _navService;


<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@title</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="model" OnValidSubmit="SaveChanges">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="model.Nombre">
            </div>
            <ValidationMessage For="@(()=>model.Nombre)" />

            <div class="input-group  mt-3">
                <span class="input-group-text bg-light">Descripcion</span>
                <textarea class="form-control" @bind="model.Descripcion"></textarea>

            </div>
            <ValidationMessage For="@(()=>model.Descripcion)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Categoria</label>
                <select class="form-select" value="@model.IdCategoria" @onchange="ChangeCategory">
                    @foreach (var item in listCategory)
                    {
                        <option value="@item.IdCategoria">@item.Nombre</option>
                    }
                </select>
            </div>

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                <input type="number" class="form-control" @bind-value="model.Precio">
            </div>
            <ValidationMessage For="@(()=>model.Precio)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio Oferta</span>
                <input type="number" class="form-control" @bind-value="model.PrecioOferta">
            </div>
            <ValidationMessage For="@(()=>model.PrecioOferta)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                <input type="number" class="form-control" @bind-value="model.Cantidad">
            </div>
            <ValidationMessage For="@(()=>model.Cantidad)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light">Imagen</label>
                <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@btn</button>
                <a href="/products" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>




    </div>

</div>

@code {
    [Parameter]
    public int id { get; set; }
    private string title = "Nuev Producto";
    private string btn = "Crear";
    private ProductoDTO model = new ProductoDTO();
    private List<CategoriaDTO> listCategory = new List<CategoriaDTO>();

    protected override async Task OnInitializedAsync()
    {
        var respose = await categoryService.ListCategory("");
        if (respose.EsCorrecto)
        {
            listCategory = (List<CategoriaDTO>)respose.Resultado!;
            if(listCategory.Any() && id == 0)
            {
                model.IdCategoria = listCategory.First().IdCategoria;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (id != 0)
        {
            title = "Editar Producto";
            btn = "Actualizar";

            var respose = await productService.Get(id);
            if (respose.EsCorrecto)
            {
                model = (ProductoDTO)respose.Resultado!;
            }
            else
            {
                toastService.ShowWarning(respose.Mensaje);
            }
        }
    }

    void ChangeCategory(ChangeEventArgs e)
    {
        model.IdCategoria = Convert.ToInt32(e.Value.ToString());
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);

        if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".png"))
        {
            var format = $"image/{fileInfo.Extension.Replace(".", "")}";
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            model.Imagen = imageData;
        }
    }

    private async Task SaveChanges()
    {
        bool res = true;
        string mjs = string.Empty;

        if (id != 0)
        {
            var respose = await productService.Update(model);
            if (respose.EsCorrecto)
            {
                mjs = "Producto modificado";
            }
            else
            {
                res = false;
                mjs = "No pudo editar";
            }
        }
        else
        {
            var respose = await productService.Insert(model);

            if (respose.EsCorrecto)
            {
                mjs = "Producto creado";
            }
            else
            {
                res = false;
                mjs = "No pudo crear";
            }
        }

        if (res)
        {
            toastService.ShowSuccess(mjs);
            _navService.NavigateTo("/products");
        }
        else
        {
            toastService.ShowWarning(mjs);
        }
    }
}
