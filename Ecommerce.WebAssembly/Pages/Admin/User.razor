@page "/user"
@page "/user/{id:int}"

@inject IUserService usuarioService;
@inject IToastService toastService;
@inject NavigationManager _navService;

<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@title</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">
        <EditForm Model="model" OnValidSubmit="SaveChanges">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre Completo</span>
                <input type="text" class="form-control" @bind-value="model.NombreCompleto">
            </div>
            <ValidationMessage For="@(()=>model.NombreCompleto)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Correo</span>
                <input type="text" class="form-control" @bind-value="model.Correo"><br />
            </div>
            <ValidationMessage For="@(()=>model.Correo)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Contraseña</span>
                <input type="password" class="form-control" @bind-value="model.Clave">
            </div>
            <ValidationMessage For="@(()=>model.Clave)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Confirmar Contraseña</span>
                <input type="password" class="form-control" @bind-value="model.ConfirmarClave">
            </div>
            <ValidationMessage For="@(()=>model.ConfirmarClave)" />

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@btn</button>
                <a href="/users" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>


    </div>

</div>


@code {
    [Parameter]
    public int id { get; set; }
    private string title = "Nuevo Usuario";
    private string btn = "Crear";
    private UserDTO model = new UserDTO();

    protected override async Task OnParametersSetAsync()
    {
        if (id != 0)
        {
            title = "Editar Usuario";
            btn = "Actualizar";

            var respose = await usuarioService.Get(id);
            if (respose.EsCorrecto)
            {
                model = (UserDTO)respose.Resultado!;
                model.ConfirmarClave = Int32.Parse(model.Clave!);
            }
            else
            {
                toastService.ShowWarning(respose.Mensaje);
            }
        }
    }

    private async Task SaveChanges()
    {
        if (Int32.Parse(model.Clave!) != model.ConfirmarClave)
        {
            toastService.ShowWarning("La contraseñas no coinciden");
            return;
        }

        bool res = true;
        string mjs = string.Empty;

        if (id != 0)
        {
            var respose = await usuarioService.Update(model);
            if (respose.EsCorrecto)
            {
                mjs = "Usuario modificado";
            }
            else
            {
                res = false;
                mjs = "No se pudo editar";
            }
        }
        else
        {
            model.Rol = "Administrador";
            var respose = await usuarioService.Insert(model);

            if (respose.EsCorrecto)
            {
                mjs = "Usuario creado";
            }
            else
            {
                res = false;
                mjs = "No se pudo crear";
            }
        }

        if (res)
        {
            toastService.ShowSuccess(mjs);
            _navService.NavigateTo("/users");
        }
        else
        {
            toastService.ShowWarning(mjs);
        }
    }
}
